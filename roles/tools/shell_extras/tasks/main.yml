---
- name: 'Check that role supports target OS'
  when: 'ansible_os_family not in ["Archlinux", "RedHat"]'
  tags: 'user'
  ansible.builtin.fail:
    msg: >-
      This role does not yet support target distribution;
      target OS family is: {{ ansible_os_family }}.

- name: 'Install extra CLI tools'
  become: true
  become_user: 'root'
  ansible.builtin.package:
    state: 'present'
    name: '{{ tools_shell_extras_packages[ansible_os_family] }}'

- name: 'Install static binaries when packages are not available'
  when: 'ansible_os_family == "RedHat"'
  block:
    - name: 'Install fzf static binary'
      ansible.builtin.unarchive:
        src: '{{ tools_shell_extras_fzf_release }}'
        dest: '/usr/local/bin'
        remote_src: true

    - name: 'Ensure fzf shell completions directory exists'
      ansible.builtin.file:
        path: '/usr/share/fzf'
        owner: 'root'
        group: 'root'
        state: 'directory'
        mode: '0755'

    - name: 'Install fzf shell configurations'
      ansible.builtin.unarchive:
        src: '{{ tools_shell_extras_fzf_sources }}'
        dest: '/usr/share/fzf'
        remote_src: true
        extra_opts:
          - '--strip=2'
          - '--wildcards'
          - 'fzf-{{ tools_shell_extras_fzf_version }}/shell/*'

    - name: 'Install bat static binary'
      ansible.builtin.unarchive:
        src: '{{ tools_shell_extras_bat_release }}'
        dest: '/usr/local/bin'
        remote_src: true
        extra_opts:
          - '--strip=1'
          - '--wildcards'
          - '*/bat'

    - name: 'Install fd static binary'
      ansible.builtin.unarchive:
        src: '{{ tools_shell_extras_fd_release }}'
        dest: '/usr/local/bin'
        remote_src: true
        extra_opts:
          - '--strip=1'
          - '--wildcards'
          - '*/fd'

- name: 'Install profile drop-ins'
  tags: 'user'
  ansible.builtin.copy:
    src: 'profile_dropins/'
    dest: '{{ user_config.home_dir }}/{{ user_config.profile_dropins_dir }}'
    owner: '{{ user_name }}'
    group: '{{ user_name }}'
    mode: '0644'

- name: 'Install drop-ins for shells'
  tags: 'user'
  loop: '{{ user_config.shells | dict2items }}'
  ansible.builtin.copy:
    src: 'shell_dropins/{{ item.key }}/'
    dest: '{{ user_config.home_dir }}/{{ item.value.config_dropins_dir }}'
    owner: '{{ user_name }}'
    group: '{{ user_name }}'
    mode: '0644'

- name: 'Install drop-ins for editors'
  tags: 'user'
  loop: '{{ user_config.editors | dict2items | map(attribute="key") }}'
  loop_control:
    loop_var: 'editor_item'
  vars:
    editor: '{{ editor_item }}'
  ansible.builtin.include_tasks:
    file: 'editor_config.yml'
    apply:
      tags: 'user'
