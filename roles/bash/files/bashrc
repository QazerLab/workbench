# If not running interactively, don't do anything.
[[ $- != *i* ]] && return

PS1='\[\e[1;32m\]\t | \w>\n\[\e[1;37m\]\$ '
PS2='> '
PS3='> '
PS4='+ '

alias ls='ls --color=auto'
alias ll='ls -l'

alias grep='grep --color'
alias diff='diff --unified --color'
alias mysql='mysql --pager=less'
alias pacman='pacman --color always'

# Common completions for well-known tools.
[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion
[ -r /usr/share/git/completion/git-completion.bash ] && . /usr/share/git/completion/git-completion.bash

# A shortcut for kubectl and its specific long subcommands.
#
# $1 may (optionally) be a special alias for subcommands.
function kc() {
    # Shortcut for setting current namespace. Vanilla kubectl API here is a total crap, and looks like
    # nobody i k8s comunity is going to implement something as short as OpenShift's "oc project PROJECT".
    case "$1" in
        "ns")
            if [ -z "$2" ]
            then
                echo "You must specify a namespace to be set:"
                echo "    kc ns NAMESPACE"
                return 2
            fi

            kubectl config set-context --current --namespace "$2"
            ;;

        # This block enhances kubectl with few additional resource name abbreviations. Not all of them are
        # straightfoward, e.g. "dc" for "deployment" is rather a tribute to OpenShift than a logical contraction.
        #
        # XXX: this does not work perfectly, as resource name may be at any place after the verb.
        # While "kc get dc -o yaml" is OK, "kc get -o yaml dc" won't do, though this is a valid arguments order.
        "get" | "describe")
            case "$2" in
                "dc")
                    kubectl "$1" deployments ${@:3}
                    ;;

                "rb")
                    kubectl "$1" rolebindings ${@:3}
                    ;;

                "cr")
                    kubectl "$1" clusterroles ${@:3}
                    ;;

                "crb")
                    kubectl "$1" clusterrolebindings ${@:3}
                    ;;

                *)
                    kubectl $@
            esac
            ;;

        *)
            kubectl $@
    esac
}

# Diff between actual config and its default version in the installed package.
#
# $1 - file.
function cdiff () {
    if ! which pacman >/dev/null 2>&1
    then
        echo "cdiff currently works only on pacman-based distros!"
        return 2
    fi

    pkg=$(pacman -Qoq "$1")
    if [ $? -ne 0 ]
    then
        echo "Could not determine the file owner!"
        return 2
    fi

    pkg_ver=$(pacman -Qi "$pkg" | grep Version | awk '{print $3}')
    if [ $? -ne 0 ]
    then
        echo "Could not determine the package version!"
        return 2
    fi

    pkg_name="$pkg-$pkg_ver-$(uname -m).pkg.tar.xz"
    pkg_file="/var/cache/pacman/pkg/$pkg_name"
    if [ ! -r "$pkg_file" ]
    then
        echo "Pacman cache does not contain $pkg_file or may not be read by you!"
        return 2
    fi

    file_name=$(readlink -f "$1")

    # Cut leading slash, cause in archive the path is relative
    file_name_cut=${file_name:1}

    xz -dc "/var/cache/pacman/pkg/$pkg_name" | tar -xO "$file_name_cut" | diff --color -u - "$file_name"
}

# Finally, give a chance to perform machine-specific configuration.
# This configuration is not managed by Ansible.
if [ -d ~/.bashrc.d ]
then
    for rcfile in ~/.bashrc.d/*
    do
        . "$rcfile"
    done
fi
